// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Parent
  Sitter
}

enum Experiance {
  Entry
  Intermideate
  Expert
}

model Draft {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  phoneNumber String   @unique
  email       String   @unique
  role        Role     @default(Parent)
  createdAt   DateTime @default(now())
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  phoneNumber  String         @unique
  email        String         @unique
  isConfirmed  DateTime       @default(now())
  passwordHash String
  role         Role           @default(Parent)
  parent       Parent?
  sitter       Sitter?
  refreshToken RefreshToken[]
  chatMember   ChatMember?
}

model RefreshToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  hashedToken String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("refreshtokens")
}

model ResetUUID {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique
}

//user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

model Parent {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  gender     String
  profilePic String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  cityId     String     @db.ObjectId
  userId     String     @unique @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  city       City?      @relation(fields: [cityId], references: [id])
  booking    Booking[]
  feedbacks  Feedback[]
}

model Sitter {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  gender              String
  birthDate           DateTime
  City                City?      @relation(fields: [cityId], references: [id])
  cityId              String?    @db.ObjectId
  educationBackground String
  certificate         String
  isVerifyed          Boolean?
  profilePic          String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now())
  feedbacks           Feedback[]
  user                User       @relation(fields: [userId], references: [id])
  userId              String     @unique @db.ObjectId
  proposal            Proposal[]
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float    @default(0.0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Sitter    Sitter?  @relation(fields: [sitterId], references: [id])
  sitterId  String?  @db.ObjectId
  Parent    Parent?  @relation(fields: [parentId], references: [id])
  parentId  String?  @db.ObjectId
}

model Booking {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  datefrom     DateTime
  dateTo       DateTime
  numberChiled Int        @default(1)
  cord         String?
  description  String
  experiance   Experiance
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  proposal     Proposal[]
  Parent       Parent?    @relation(fields: [parentId], references: [id])
  parentId     String?    @db.ObjectId
}

model Proposal {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  coverLetter String
  Booking     Booking?  @relation(fields: [bookingId], references: [id])
  bookingId   String?   @db.ObjectId
  Sitter      Sitter?   @relation(fields: [sitterId], references: [id])
  sitterId    String?   @db.ObjectId
  contract    Contract?
}

model Contract {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  startDate  DateTime  @default(now())
  Proposal   Proposal? @relation(fields: [proposalId], references: [id])
  proposalId String?   @unique @db.ObjectId
}

model State {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cities    City[]
}

model City {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  State     State?   @relation(fields: [stateId], references: [id])
  stateId   String?  @db.ObjectId
  sitter    Sitter[]
  Parent    Parent[]
}

// setup chat server schema
model ChatMember {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  userEmail String     @unique
  user      User       @relation(fields: [userEmail], references: [email], onUpdate: Cascade, onDelete: Cascade)
  location  Location[]
  messages  Messages[]
}

model Messages {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  text      String
  sentBy    ChatMember @relation(fields: [senderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  senderId  String     @db.ObjectId
}

model Location {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  memberId  String     @unique @db.ObjectId
  member    ChatMember @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  latitude  Float
  longitude Float
}
